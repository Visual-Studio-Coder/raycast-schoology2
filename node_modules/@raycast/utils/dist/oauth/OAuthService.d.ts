import { OAuth } from "@raycast/api";
import { OnAuthorizeParams } from "./withAccessToken";
export interface OAuthServiceOptions {
    client: OAuth.PKCEClient;
    clientId: string;
    scope: string;
    authorizeUrl: string;
    tokenUrl: string;
    refreshTokenUrl?: string;
    personalAccessToken?: string;
    bodyEncoding?: "json" | "url-encoded";
    extraParameters?: Record<string, string>;
    onAuthorize?: (params: OnAuthorizeParams) => void;
}
/**
 * Class allowing to create an OAuth service using the the PKCE (Proof Key for Code Exchange) flow.
 *
 * This service is capable of starting the authorization process, fetching and refreshing tokens,
 * as well as managing the authentication state.
 *
 * @example
 * ```typescript
 * const oauthClient = new OAuth.PKCEClient({ ... });
 * const oauthService = new OAuthService({
 *   client: oauthClient,
 *   clientId: 'your-client-id',
 *   scope: 'required scopes',
 *   authorizeUrl: 'https://provider.com/oauth/authorize',
 *   tokenUrl: 'https://provider.com/oauth/token',
 *   refreshTokenUrl: 'https://provider.com/oauth/token',
 *   extraParameters: { 'additional_param': 'value' }
 * });
 * ```
 */
export declare class OAuthService implements OAuthServiceOptions {
    clientId: string;
    scope: string;
    client: OAuth.PKCEClient;
    extraParameters?: Record<string, string>;
    authorizeUrl: string;
    tokenUrl: string;
    refreshTokenUrl?: string;
    bodyEncoding?: "json" | "url-encoded";
    personalAccessToken?: string;
    onAuthorize?: (params: OnAuthorizeParams) => void;
    constructor(options: OAuthServiceOptions);
    /**
     * Asana OAuth service provided out of the box.
     *
     * @example
     * ```typescript
     * const asana = OAuthService.asana({
     *   clientId: 'custom-client-id', // Optional: If omitted, defaults to a pre-configured client ID
     *   scope: 'default', // Specify the scopes your application requires
     *   personalAccessToken: 'personal-access-token', // Optional: For accessing the API directly
     * });
     * ```
     */
    static asana: (options: import("./providers").ProviderOptions) => OAuthService;
    /**
     * GitHub OAuth service provided out of the box.
     *
     * @example
     * ```typescript
     * const github = OAuthService.github({
     *   clientId: 'custom-client-id', // Optional: If omitted, defaults to a pre-configured client ID
     *   scope: 'repo user', // Specify the scopes your application requires
     *   personalAccessToken: 'personal-access-token', // Optional: For accessing the API directly
     * });
     * ```
     */
    static github: (options: import("./providers").ProviderOptions) => OAuthService;
    /**
     * Google OAuth service provided out of the box.
     *
     * @example
     * ```typescript
     * const google = OAuthService.google({
     *   clientId: 'custom-client-id', // Optional: If omitted, defaults to a pre-configured client ID
     *   scope: 'https://www.googleapis.com/auth/drive.readonly', // Specify the scopes your application requires
     *   personalAccessToken: 'personal-access-token', // Optional: For accessing the API directly
     * });
     * ```
     */
    static google: (options: import("./providers").ProviderOptions) => OAuthService;
    /**
     * Jira OAuth service provided out of the box.
     *
     * @example
     * ```typescript
     * const jira = OAuthService.jira({
     *   clientId: 'custom-client-id', // Optional: If omitted, defaults to a pre-configured client ID
     *   scope: 'read:jira-user read:jira-work', // Specify the scopes your application requires
     *   personalAccessToken: 'personal-access-token', // Optional: For accessing the API using a personal token
     * });
     * ```
     */
    static jira: (options: import("./providers").ProviderOptions) => OAuthService;
    /**
     * Linear OAuth service provided out of the box.
     *
     * @example
     * ```typescript
     * const linear = OAuthService.linear({
     *   clientId: 'custom-client-id', // Optional: If omitted, defaults to a pre-configured client ID
     *   scope: 'read write', // Specify the scopes your application requires
     *   personalAccessToken: 'personal-access-token', // Optional: For accessing the API using a personal token
     * });
     * ```
     */
    static linear: (options: import("./providers").ProviderOptions) => OAuthService;
    /**
     * Slack OAuth service provided out of the box.
     *
     * @example
     * ```typescript
     * const slack = OAuthService.slack({
     *   clientId: 'custom-client-id', // Optional: If omitted, defaults to a pre-configured client ID
     *   scope: 'emoji:read', // Specify the scopes your application requires
     *   personalAccessToken: 'personal-access-token', // Optional: For accessing the API using a personal token
     * });
     * ```
     */
    static slack: (options: import("./providers").ProviderOptions) => OAuthService;
    /**
     * Zoom OAuth service provided out of the box.
     *
     * @example
     * ```typescript
     * const zoom = OAuthService.zoom({
     *   clientId: 'custom-client-id', // Optional: If omitted, defaults to a pre-configured client ID
     *   scope: '', // Specify the scopes your application requires
     *   personalAccessToken: 'personal-access-token', // Optional: For accessing the API using a personal token
     * });
     * ```
     */
    static zoom: (options: import("./providers").ProviderOptions) => OAuthService;
    /**
     * Initiates the OAuth authorization process or refreshes existing tokens if necessary.
     * If the current token set has a refresh token and it is expired, then the function will refresh the tokens.
     * If no tokens exist, it will initiate the OAuth authorization process and fetch the tokens.
     *
     * @returns {Promise<string>} A promise that resolves with the access token obtained from the authorization flow, or null if the token could not be obtained.
     */
    authorize(): Promise<string>;
    private fetchTokens;
    private refreshTokens;
}
//# sourceMappingURL=OAuthService.d.ts.map